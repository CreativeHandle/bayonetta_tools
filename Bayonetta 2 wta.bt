BigEndian();
char id[4] <hidden=true>;
Assert( Memcmp("\0BTW", id, 4) == 0, "Wrong file type");
FSeek(0);
struct {
    char    id[4]; //WTB\0
    int32   unknown;
    int32   numTex;
    uint32  offsetTextureOffsets;
    uint32  offsetTextureSizes;
    uint32  offsetTextureFlags; //0x20000000 alpha, 0x10000000 1bit alpha
    uint32  offsetTextureIdx;
    uint32  offsetTextureInfo;
    uint32  offsetMipmapOffsets;
} header;

FSeek( header.offsetTextureOffsets );
uint32  textureOffsets[header.numTex];

FSeek( header.offsetTextureSizes );
int32  textureSizes[header.numTex];

FSeek( header.offsetTextureFlags );
uint32  textureFlags[header.numTex];

FSeek( header.offsetTextureIdx );
uint32  textureIdx[header.numTex];

local int i;
for ( i = 0; i < header.numTex; i++) {
    FSeek( header.offsetTextureInfo + i*0xc0 );
    struct {
        DWORD dimension;
        DWORD width;
        DWORD height;
        DWORD depth;
        DWORD numMipmaps;
        DWORD format;
        DWORD AAMode;
        DWORD usage;
        DWORD dataLength;
        DWORD dataPointer;
        DWORD mipmapsDataLength;
        DWORD mimapsPointer;
        DWORD tileMode;
        DWORD swizzleValue;
        DWORD alignment;
        DWORD pitch;
        DWORD mimapOffsets[13];
        DWORD firstMipmap;
        DWORD numMipmaps2;
        DWORD firstSlice;
        DWORD numSlices;
        BYTE component[4];
        DWORD textureRegisters[5];
    } GX2Header;
}

FSeek( header.offsetMipmapOffsets );
uint32 mipmapOffsets[header.numTex];
