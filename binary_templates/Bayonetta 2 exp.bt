BigEndian();

struct {
    char    id[4];
    int32   tag;
    int32   offsetRecord;
    int32   numRecord;
    uint32  offsetData;
    uint32  numData;
} header;

FSeek(header.offsetRecord);

struct {
    uint32  flags<format=hex>;
    int16   valueCount;
    int16   unknown;
    uint32  offset<format=hex>;
} records[header.numRecord];

local int i;
for( i = 0; i < header.numRecord; i++) {
    FSeek(header.offsetRecord + i*12 + records[i].offset);
    struct {
        struct {
            uchar idx[4];
            float val;
        } values[records[i].valueCount];
    } entry;
}

FSeek(header.offsetData);

struct {
    int16   type;
    int16   unknown;
    uint32  offset<format=hex>;
} dataRecords[header.numData];

for( i = 0; i < header.numData; i++) {
    FSeek(header.offsetData + i*8 + dataRecords[i].offset);
    switch (dataRecords[i].type) {
    case 3:
        struct {
            float vals[12];
        } dataEntry;
    }
}